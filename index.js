// By Mohammed Hamzeh

const OpenAI = require("openai");
const { TwitterApi } = require("twitter-api-v2");
const SECRETS = require("./SECRETS");
const fs = require('fs');
const path = require('path');

// Read accounts from accounts.txt file
function readAccountsFromFile() {
  try {
    const accountsFilePath = path.join(__dirname, 'accounts.txt');
    if (!fs.existsSync(accountsFilePath)) {
      console.log('‚ö†Ô∏è accounts.txt file not found. Creating sample file...');
      const sampleContent = `# Twitter accounts in format: APP_KEY,APP_SECRET,ACCESS_TOKEN,ACCESS_SECRET
# Each line represents one account
${SECRETS.APP_KEY},${SECRETS.APP_SECRET},${SECRETS.ACCESS_TOKEN},${SECRETS.ACCESS_SECRET}
# Add more accounts as needed, one per line in the same format`;
      fs.writeFileSync(accountsFilePath, sampleContent);
      console.log('Sample accounts.txt file created.');
    }

    const fileContent = fs.readFileSync(accountsFilePath, 'utf8');
    const accounts = [];
    
    fileContent.split('\n').forEach(line => {
      // Skip empty lines and comments
      if (line.trim() === '' || line.trim().startsWith('#')) {
        return;
      }
      
      const [appKey, appSecret, accessToken, accessSecret] = line.split(',').map(item => item.trim());
      if (appKey && appSecret && accessToken && accessSecret) {
        accounts.push({
          appKey,
          appSecret,
          accessToken,
          accessSecret
        });
      }
    });
    
    return accounts;
  } catch (error) {
    console.error('Error reading accounts file:', error);
    // Fallback to the default account from SECRETS.js
    return [{
      appKey: SECRETS.APP_KEY,
      appSecret: SECRETS.APP_SECRET,
      accessToken: SECRETS.ACCESS_TOKEN,
      accessSecret: SECRETS.ACCESS_SECRET
    }];
  }
}

// Initialize Twitter clients for all accounts
const twitterAccounts = readAccountsFromFile();
const twitterClients = twitterAccounts.map(account => {
  return new TwitterApi({
    appKey: account.appKey,
    appSecret: account.appSecret,
    accessToken: account.accessToken,
    accessSecret: account.accessSecret,
  });
});

console.log(`üîÑ Loaded ${twitterClients.length} Twitter accounts from accounts.txt`);

// Initialize AI API (DeepSeek or OpenAI) with configuration
const openai = new OpenAI({
  apiKey: SECRETS.DEEPSEEK_API_KEY || SECRETS.OPENAI_API_KEY,
  baseURL: SECRETS.DEEPSEEK_API_KEY ? "https://api.deepseek.com/v1" : undefined,
});

const requiredTags = "@giverep $REP @ikadotxyz";

/**
 * Generates tweet content using AI (OpenAI or DeepSeek)
 * Falls back to a predefined tweet if AI generation fails
 */
async function generateTweet() {
  try {
    const prompt = `
      Generate a tweet about GiveRep airdrop project on Sui network. 
      Include these tags: ${requiredTags}
      Keep it under 238 characters (excluding tags)
      Make it engaging and informative
      Use emojis where appropriate
      Focus on benefits, features, or community aspects
    `;

    console.log("Generating tweet with AI...");
    
    // Try to use the AI API for content generation
    try {
      const response = await openai.chat.completions.create({
        model: SECRETS.DEEPSEEK_API_KEY ? "deepseek-chat" : "gpt-3.5-turbo",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 300,
        temperature: 0.7,
      });
      
      // Extract the generated tweet text
      const generatedText = response.choices[0].message.content.trim();
      
      // Remove any tags that might have been generated by the AI
      let cleanedText = generatedText;
      if (generatedText.includes("@giverep") || 
          generatedText.includes("$REP") || 
          generatedText.includes("@ikadotxyz")) {
        // Remove the tags from the generated text
        cleanedText = generatedText
          .replace(/@giverep/gi, "")
          .replace(/\$REP/g, "")
          .replace(/@ikadotxyz/gi, "")
          .trim();
      }
      
      // Combine base text with required tags
      const tweetText = `${cleanedText} ${requiredTags}`;
      
      console.log("\n--- Generated Tweet ---");
      console.log(tweetText);
      console.log("--- End of Tweet ---\n");
      console.log(`Tweet length: ${tweetText.length} characters (max: 280)`);
      
      return tweetText;
    } catch (aiError) {
      console.error("AI API Error:", aiError.message);
      console.log("Falling back to predefined tweet content...");
      
      // Predefined tweets to use as fallbacks
      const fallbackTweets = [
        `üöÄ Excited about the GiveRep project on Sui network! Earn by engaging with quality content and building your reputation. Join now! ${requiredTags}`,
        `üíØ GiveRep is revolutionizing content engagement on Sui. Contribute, earn rewards, and build your reputation in the community! ${requiredTags}`,
        `‚ú® Looking for the next big thing on Sui? GiveRep rewards quality engagement and helps build meaningful connections in the ecosystem! ${requiredTags}`
      ];
      
      // Select a random fallback tweet
      const randomTweet = fallbackTweets[Math.floor(Math.random() * fallbackTweets.length)];
      
      console.log("\n--- Fallback Tweet ---");
      console.log(randomTweet);
      console.log("--- End of Tweet ---\n");
      console.log(`Tweet length: ${randomTweet.length} characters (max: 280)`);
      
      return randomTweet;
    }
    
  } catch (error) {
    console.error("Error in tweet generation process:", error);
    // Final fallback if everything else fails
    return `üöÄ Excited about the GiveRep project on Sui network! Join the community today! ${requiredTags}`;
  }
}

/**
 * Posts a tweet to Twitter or simulates posting if there are API issues
 * @param {string} tweetText - The text of the tweet to post
 * @param {object} twitterClient - The Twitter client to use for posting
 * @param {number} accountIndex - The index of the account being used
 * @returns {Promise<object>} - Response from Twitter API
 */
async function postTweetWithClient(tweetText, twitterClient, accountIndex) {
  try {
    console.log(`Posting tweet to Twitter account #${accountIndex + 1}...`);
    
    try {
      // Try to post to Twitter
      const response = await twitterClient.v2.tweet(tweetText);
      console.log(`‚úÖ Account #${accountIndex + 1}: Tweet posted successfully!`);
      console.log(`   Tweet ID: ${response.data.id}`);
      console.log(`   Tweet URL: https://twitter.com/user/status/${response.data.id}`);
      return { 
        success: true, 
        response,
        accountIndex
      };
    } catch (twitterError) {
      // Handle Twitter API errors
      console.error(`‚ùå Account #${accountIndex + 1} Twitter API Error:`, twitterError.message);
      
      if (twitterError.code === 403) {
        console.log(`\n‚ö†Ô∏è Twitter account #${accountIndex + 1} doesn't have write permissions.`);
        console.log("To fix this, you need to apply for Elevated access in the Twitter Developer Portal:");
        console.log("1. Go to https://developer.twitter.com/en/portal/dashboard");
        console.log("2. Select your app");
        console.log("3. Go to 'User authentication settings'");
        console.log("4. Ensure you have 'Read and write' permissions enabled");
        console.log("5. You may need to reapply for elevated access if your app only has read permissions");
      }
      
      console.log(`\nSimulating successful tweet post for testing with account #${accountIndex + 1}...`);
      console.log("Note: The tweet was NOT actually posted to Twitter.");
      
      // Return a simulated response for testing
      return { 
        success: false, 
        error: twitterError,
        simulated: true,
        accountIndex,
        response: {
          data: {
            id: `simulation-account${accountIndex + 1}-${Date.now()}`,
            text: tweetText
          }
        }
      };
    }
  } catch (error) {
    console.error(`Error in tweet posting process for account #${accountIndex + 1}:`, error);
    return { 
      success: false, 
      error,
      accountIndex
    };
  }
}

/**
 * Posts a tweet to all Twitter accounts
 */
async function postTweetToAllAccounts(tweetText) {
  console.log(`Attempting to post tweet to ${twitterClients.length} Twitter accounts...`);
  
  const results = await Promise.all(
    twitterClients.map((client, index) => 
      postTweetWithClient(tweetText, client, index)
    )
  );
  
  // Summary of results
  const successCount = results.filter(r => r.success).length;
  const simulatedCount = results.filter(r => r.simulated).length;
  const failedCount = results.filter(r => !r.success && !r.simulated).length;
  
  console.log("\n=== POSTING SUMMARY ===");
  console.log(`Total accounts: ${results.length}`);
  console.log(`‚úÖ Successfully posted: ${successCount}`);
  console.log(`üîÑ Simulated posts: ${simulatedCount}`);
  console.log(`‚ùå Failed posts: ${failedCount}`);
  
  return results;
}

/**
 * Main function to both generate and post a tweet
 */
async function run() {
  try {
    // Check if API keys are properly configured
    if (!SECRETS.DEEPSEEK_API_KEY && !SECRETS.OPENAI_API_KEY) {
      console.error("‚ö†Ô∏è No AI API key configured. Please add either a DeepSeek or OpenAI API key to SECRETS.js");
      return;
    }
    
    // Check if we have any Twitter accounts
    if (twitterClients.length === 0) {
      console.error("‚ö†Ô∏è No Twitter accounts found in accounts.txt or SECRETS.js");
      return;
    }
    
    // Generate the tweet
    const tweet = await generateTweet();
    
    // Ask for confirmation before posting
    console.log("\nWould you like to post this tweet to all accounts? (y/n)");
    // In a real application, you would wait for user input here
    // For now, let's assume "yes" for testing purposes
    const shouldPost = true;
    
    if (shouldPost) {
      await postTweetToAllAccounts(tweet);
    } else {
      console.log("Tweet not posted. Exiting...");
    }
  } catch (error) {
    console.error("An error occurred:", error);
  }
}

// Run the program
run();
